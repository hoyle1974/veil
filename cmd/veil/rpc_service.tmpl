package {{.PackageName}}


import (
    "context"
    "github.com/hoyle1974/veil/veil"
	"github.com/hoyle1974/veil/veil_internal"
    "github.com/keegancsmith/rpc"
{{range .Packages}}     "{{.}}"
{{end}}
)

{{range .Structs}}
{{ $struct := . }}
// This is an interface that defines the publically exposed methods for the struct '{{.Name}}'
type {{.Name}}_Interface interface {
{{range .Methods}}
    {{.Name}}(ctx context.Context{{range .Args}}, {{.Name}} {{.Type}}{{end}}) ({{range $index, $element := .Returns}}{{if $index}},{{end}}{{$element}}{{end}}){{end}}
}

type {{.Name}}_RPC struct {
    service *{{.Name}}
}

func (r *{{$struct.Name}}_RPC) RPC_Bind_Service(service any) error {
    s, ok := service.(*{{.Name}})
    if !ok {
        return errors.New("not supported service")
    }
    r.service = s
    return nil
}

{{ $struct = . }}
{{range .Methods}}
func (r *{{$struct.Name}}_RPC) {{.Name}}(ctx context.Context, request *{{$struct.Name}}_RemoteImpl_{{.Name}}_Request, reply *[]any) error {
	if (r.service == nil) {
        return errors.New("service {{.Name}} not initialized")
    }
    {{range $idx, $element := .Returns}} {{if $idx}},{{end}} ret{{$idx}} {{end}} := r.service.{{.Name}}(
		ctx,{{range .Args}}
        request.{{title .Name}},{{end}}
	){{range $idx, $element :=  .Returns }}
    *reply = append(*reply, ret{{$idx}}){{end}}
    
	return nil
}
{{end}}

// This is a remote implementation client that will send RPC commands to a remote '{{.Name}}'
type {{.Name}}_RemoteImpl struct {
    conn *rpc.Client
}
{{ $save := . }}
{{range .Methods}}
// Request Object
type {{$save.Name}}_RemoteImpl_{{.Name}}_Request struct { {{range .Args}}
    {{title .Name}} {{.Type}}{{end}}
}
// Method
func (r *{{$save.Name}}_RemoteImpl) {{.Name}}(ctx context.Context{{range .Args}},{{.Name}} {{.Type}}{{end}}) ({{range $index, $element := .Returns}}{{if $index}},{{end}}{{$element}}{{end}}) {
    request := {{$save.Name}}_RemoteImpl_{{.Name}}_Request{ {{range $index, $element := .Args}}{{if $index}},{{end}}{{$element.Name}}{{end}} }

    reply := []any{}
{{range $index, $element := .Returns}}      var result{{$index}} {{$element}}
{{end}}
    err := r.conn.Call(ctx, "{{$save.Name}}_RPC.{{.Name}}", request, &reply)
    if err != nil {
        result{{ lastItemIndex .Returns }} = err
	} else { {{range $index, $element := .Returns}} 
        result{{$index}} = internal_{{$save.Name}}_RemoteImpl_nilGet[{{$element}}](reply[{{$index}}]){{end}}
	}
    return {{range $index, $element := .Returns}}{{if $index}},{{end}}result{{$index}} {{end}}
}
{{end}}

func internal_{{$save.Name}}_RemoteImpl_nilGet[T any](a any) T {
	var zero T
	if a == nil {
		return zero
	}
	return a.(T)
}

{{end}}



func init() {

    {{range $k,$v := .Types}}
    var value{{$k}} {{$v}}
    gob.Register(value{{$k}})
    gob.Register([]{{$v}}{})
    {{end}}

	veil_internal.RegisterServerInit(func(factory veil_internal.ServerFactory) {
{{range .Structs}}
			server := factory.GetServer().(*rpc.Server)

            r := &{{.Name}}_RPC{}
            if err := server.Register(r); err!=nil {
                panic(err)
            }
            veil_internal.RegisterService(r)
{{end}}
    }) // RegisterServerInit

    
	veil_internal.RegisterClientInit(func(factory veil_internal.ConnectionFactory) {
{{range .Structs}}
        veil_internal.RegisterRemoteImpl(&{{ .Name}}_RemoteImpl{factory.GetConnection().(*rpc.Client)})
{{end}}
    }) // RegisterClientInit
}

